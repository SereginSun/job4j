Запустил приложение tracker из второго модуля.
Узнал номер процесса с помощью команды jps.
Далее командой jhsdb jmap --heap --pid <pid> получил следующую информацию:
- информацию, относящуюся к алгоритму сборки мусора (GC),
включая имя алгоритма GC (G1) и детали алгоритма (GC with 4 thread(s));
- конфигурацию кучи;
- сводку по использованию кучи: для каждого поколения выводится общая ёмкость.
После создания 1000000 объектов и повторного вызова команды jhsdb jmap --heap --pid <pid>
изменилась информация в сводке по используемой памяти: увеличилось количество регионов в eden space,
survivor space полностью заполнен и увеличилось заполнение old generation.
После этого запустил повторно приложение и с помощью команды jconsole подключился к графическому интерфейсу программы.
В самом начале была одна сборка мусора в Young Generation, которая заняла 0,065 s. Память растёт плавными ступенями.
Добавил 450000 items - на графике Heap memory usage резко увеличилась используемая память в Eden до 33 Mb
и произошли две очистки Young Generation, которые заняли 0,121 s.
Уменьшил максимальный размер heap до 5 Мb опцией -Xmx5M.
Уже сразу после запуска произошли 15 сборок мусора в young generation за 0,039 s.
Добавил 10000 Items - память в old generation заполнилась до 75% и плавно растёт.
Добавил ещё 5000 Items - приложение упало с ошибкой OutOfMemoryError.
